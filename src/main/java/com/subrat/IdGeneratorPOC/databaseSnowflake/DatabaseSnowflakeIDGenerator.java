package com.subrat.IdGeneratorPOC.databaseSnowflake;

import javax.sql.DataSource;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.Objects;

public class DatabaseSnowflakeIDGenerator {
    private final DataSource dataSource;
    private final Long machineId;

    public DatabaseSnowflakeIDGenerator(DataSource dataSource, Long machineId) {
        this.dataSource = dataSource;
        this.machineId = machineId;
    }

    public Long getId(String postContent) {
        Connection connection = null;
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        try {
            connection = dataSource.getConnection();
            connection.setAutoCommit(false);
            // Call the stored procedure to generate unique ID
            callableStatement = connection.prepareCall("{call generate_unique_id(?, ?)}");
            callableStatement.setLong(1, machineId);
            callableStatement.registerOutParameter(2, java.sql.Types.BIGINT);
            callableStatement.execute();

            // Get the unique ID generated by the stored procedure
            long uniqueId = callableStatement.getLong(2);

            // Insert the post with the generated unique ID
            preparedStatement = connection.prepareStatement("INSERT INTO posts (id, post) VALUES (?, ?)");
            preparedStatement.setLong(1, uniqueId);
            preparedStatement.setString(2, postContent);
            preparedStatement.executeUpdate();
            connection.commit();
            return uniqueId;
        } catch (Exception e) {
            System.out.println("Error : " + e.getMessage());
        } finally {
            if (Objects.nonNull(callableStatement)) {
                try {
                    callableStatement.close();
                } catch (Exception e) {
                    System.out.println("Error : " + e.getMessage());
                }
            }
            if (Objects.nonNull(preparedStatement)) {
                try {
                    preparedStatement.close();
                } catch (Exception e) {
                    System.out.println("Error : " + e.getMessage());
                }
            }
            if (Objects.nonNull(connection)) {
                try {
                    connection.close();
                } catch (Exception e) {
                    System.out.println("Error : " + e.getMessage());
                }
            }
        }
        return 0l;
    }
}